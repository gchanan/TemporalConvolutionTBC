set(SRC init.cpp)
if(CMAKE_VERSION VERSION_LESS "3.1")
  include(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  if(NOT COMPILER_SUPPORTS_CXX11)
    MESSAGE(FATAL_ERROR "Your compiler does not support c++11")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else()
  set(CMAKE_CXX_STANDARD 11)
endif()

FIND_PACKAGE(CUDA)

IF(CUDA_FOUND)
  MESSAGE(STATUS "CUDA Found")
  INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
  INCLUDE(CheckLibraryExists)
  FIND_LIBRARY(THC NAMES libTHC.so "" WITH_CUDA)
  IF(THC)
    SET(WITH_CUDA 1)
  ENDIF()
  IF(NOT WITH_CUDA)
    MESSAGE(WARNING "CUDA found, but THC library not found -- disabling CUDA support")
  ELSE()
    SET(CMAKE_REQUIRED_INCLUDES ${CUDA_INCLUDE_DIRS})
    INCLUDE(CheckIncludeFile)
  ENDIF()
ENDIF()

IF(WITH_CUDA)
   ADD_DEFINITIONS(-DTORCH_TBC_CUDA)
   INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)
   CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA)
   SET (CUDA_VERBOSE_BUILD ON)
   SET (CUDA_PROPAGATE_HOST_FLAGS ON)
   INCLUDE_DIRECTORIES(${Torch_INSTALL_INCLUDE}/THC)
   set(SRC ${SRC} init_cuda.cu)
endif()

if(WITH_CUDA)
  CUDA_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
  if(CMAKE_VERSION VERSION_LESS "3.1")
    CUDA_ADD_LIBRARY(THTBC MODULE ${SRC} OPTIONS) # module for mac os x suppor
  else()
    CUDA_ADD_LIBRARY(THTBC MODULE ${SRC} OPTIONS -std c++11) # module for mac os x support
  endif()
else()
  ADD_LIBRARY(THTBC MODULE ${SRC}) # module for mac os x support
endif()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
SET_TARGET_PROPERTIES(THTBC PROPERTIES
      PREFIX "lib"
      IMPORT_PREFIX "lib")

TARGET_LINK_LIBRARIES(THTBC TH)

if(WITH_CUDA)
  TARGET_LINK_LIBRARIES(THTBC THC)
endif()

INSTALL(TARGETS THTBC
  RUNTIME DESTINATION ${Torch_INSTALL_LUA_CPATH_SUBDIR}
  LIBRARY DESTINATION ${Torch_INSTALL_LUA_CPATH_SUBDIR})
